/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.0.0 (NJsonSchema v10.1.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class ExplorationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    getExplorationResources(): Observable<ExplorationData> {
        let url_ = this.baseUrl + "/api/Exploration/res";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetExplorationResources(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetExplorationResources(<any>response_);
                } catch (e) {
                    return <Observable<ExplorationData>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExplorationData>><any>_observableThrow(response_);
        }));
    }

    protected processGetExplorationResources(response: HttpResponseBase): Observable<ExplorationData> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExplorationData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExplorationData>(<any>null);
    }

    getCurrentMap(): Observable<Map> {
        let url_ = this.baseUrl + "/api/Exploration/map";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentMap(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentMap(<any>response_);
                } catch (e) {
                    return <Observable<Map>><any>_observableThrow(e);
                }
            } else
                return <Observable<Map>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrentMap(response: HttpResponseBase): Observable<Map> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Map.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Map>(<any>null);
    }

    enterDefaultMap(): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Exploration/enter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnterDefaultMap(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnterDefaultMap(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processEnterDefaultMap(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }

    leaveMap(): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Exploration/leave";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLeaveMap(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLeaveMap(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processLeaveMap(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }

    regenerateStamina(): Observable<ExplorationData> {
        let url_ = this.baseUrl + "/api/Exploration/regenerate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegenerateStamina(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegenerateStamina(<any>response_);
                } catch (e) {
                    return <Observable<ExplorationData>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExplorationData>><any>_observableThrow(response_);
        }));
    }

    protected processRegenerateStamina(response: HttpResponseBase): Observable<ExplorationData> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExplorationData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExplorationData>(<any>null);
    }

    goTo(dir: Directions): Observable<ExplorationData> {
        let url_ = this.baseUrl + "/api/Exploration/goto/{dir}";
        if (dir === undefined || dir === null)
            throw new Error("The parameter 'dir' must be defined.");
        url_ = url_.replace("{dir}", encodeURIComponent("" + dir)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGoTo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGoTo(<any>response_);
                } catch (e) {
                    return <Observable<ExplorationData>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExplorationData>><any>_observableThrow(response_);
        }));
    }

    protected processGoTo(response: HttpResponseBase): Observable<ExplorationData> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExplorationData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExplorationData>(<any>null);
    }

    gather(): Observable<ExplorationData> {
        let url_ = this.baseUrl + "/api/Exploration/gather";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGather(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGather(<any>response_);
                } catch (e) {
                    return <Observable<ExplorationData>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExplorationData>><any>_observableThrow(response_);
        }));
    }

    protected processGather(response: HttpResponseBase): Observable<ExplorationData> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExplorationData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExplorationData>(<any>null);
    }

    fight(style: CombatStyle): Observable<ExplorationData> {
        let url_ = this.baseUrl + "/api/Exploration/fight";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(style);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFight(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFight(<any>response_);
                } catch (e) {
                    return <Observable<ExplorationData>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExplorationData>><any>_observableThrow(response_);
        }));
    }

    protected processFight(response: HttpResponseBase): Observable<ExplorationData> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExplorationData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExplorationData>(<any>null);
    }
}

@Injectable()
export class LoginClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    login(user: LoginRequestDto): Observable<string> {
        let url_ = this.baseUrl + "/api/auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }
}

@Injectable()
export class PlayerClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    get(): Observable<Player> {
        let url_ = this.baseUrl + "/api/Player";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<Player>><any>_observableThrow(e);
                }
            } else
                return <Observable<Player>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<Player> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Player.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Player>(<any>null);
    }

    post(value: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Player";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processPost(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    getTest(): Observable<string> {
        let url_ = this.baseUrl + "/api/Player/test";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTest(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGetTest(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    register(newPlayerRequest: RegisterRequestDto): Observable<string> {
        let url_ = this.baseUrl + "/api/Player/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(newPlayerRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    put(id: number, value: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Player/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPut(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processPut(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Player/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export class ExplorationData implements IExplorationData {
    id!: number;
    player?: Player | undefined;
    stamina!: number;
    currentMapId!: number;
    x!: number;
    y!: number;
    bag?: OwnedItemOfBaseItem[] | undefined;

    constructor(data?: IExplorationData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.player = _data["player"] ? Player.fromJS(_data["player"]) : <any>undefined;
            this.stamina = _data["stamina"];
            this.currentMapId = _data["currentMapId"];
            this.x = _data["x"];
            this.y = _data["y"];
            if (Array.isArray(_data["bag"])) {
                this.bag = [] as any;
                for (let item of _data["bag"])
                    this.bag!.push(OwnedItemOfBaseItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExplorationData {
        data = typeof data === 'object' ? data : {};
        let result = new ExplorationData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["player"] = this.player ? this.player.toJSON() : <any>undefined;
        data["stamina"] = this.stamina;
        data["currentMapId"] = this.currentMapId;
        data["x"] = this.x;
        data["y"] = this.y;
        if (Array.isArray(this.bag)) {
            data["bag"] = [];
            for (let item of this.bag)
                data["bag"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IExplorationData {
    id: number;
    player?: Player | undefined;
    stamina: number;
    currentMapId: number;
    x: number;
    y: number;
    bag?: OwnedItemOfBaseItem[] | undefined;
}

export class Player implements IPlayer {
    id!: number;
    mail?: string | undefined;
    name?: string | undefined;
    password?: string | undefined;
    inventory?: Inventory | undefined;

    constructor(data?: IPlayer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.mail = _data["mail"];
            this.name = _data["name"];
            this.password = _data["password"];
            this.inventory = _data["inventory"] ? Inventory.fromJS(_data["inventory"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Player {
        data = typeof data === 'object' ? data : {};
        let result = new Player();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["mail"] = this.mail;
        data["name"] = this.name;
        data["password"] = this.password;
        data["inventory"] = this.inventory ? this.inventory.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPlayer {
    id: number;
    mail?: string | undefined;
    name?: string | undefined;
    password?: string | undefined;
    inventory?: Inventory | undefined;
}

export class Inventory implements IInventory {
    id!: number;
    resourceItems?: OwnedItemOfResourceItem[] | undefined;
    trophyItems?: OwnedItemOfTrophyItem[] | undefined;

    constructor(data?: IInventory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["resourceItems"])) {
                this.resourceItems = [] as any;
                for (let item of _data["resourceItems"])
                    this.resourceItems!.push(OwnedItemOfResourceItem.fromJS(item));
            }
            if (Array.isArray(_data["trophyItems"])) {
                this.trophyItems = [] as any;
                for (let item of _data["trophyItems"])
                    this.trophyItems!.push(OwnedItemOfTrophyItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Inventory {
        data = typeof data === 'object' ? data : {};
        let result = new Inventory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.resourceItems)) {
            data["resourceItems"] = [];
            for (let item of this.resourceItems)
                data["resourceItems"].push(item.toJSON());
        }
        if (Array.isArray(this.trophyItems)) {
            data["trophyItems"] = [];
            for (let item of this.trophyItems)
                data["trophyItems"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IInventory {
    id: number;
    resourceItems?: OwnedItemOfResourceItem[] | undefined;
    trophyItems?: OwnedItemOfTrophyItem[] | undefined;
}

export class OwnedItemOfResourceItem implements IOwnedItemOfResourceItem {
    id!: number;
    item?: ResourceItem | undefined;
    amount!: number;

    constructor(data?: IOwnedItemOfResourceItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.item = _data["item"] ? ResourceItem.fromJS(_data["item"]) : <any>undefined;
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): OwnedItemOfResourceItem {
        data = typeof data === 'object' ? data : {};
        let result = new OwnedItemOfResourceItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["item"] = this.item ? this.item.toJSON() : <any>undefined;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface IOwnedItemOfResourceItem {
    id: number;
    item?: ResourceItem | undefined;
    amount: number;
}

export class BaseItem implements IBaseItem {
    id!: number;
    name?: string | undefined;

    constructor(data?: IBaseItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): BaseItem {
        data = typeof data === 'object' ? data : {};
        let result = new BaseItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IBaseItem {
    id: number;
    name?: string | undefined;
}

export class ResourceItem extends BaseItem implements IResourceItem {
    tiers!: number;
    resType!: ResourceItemType;

    constructor(data?: IResourceItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.tiers = _data["tiers"];
            this.resType = _data["resType"];
        }
    }

    static fromJS(data: any): ResourceItem {
        data = typeof data === 'object' ? data : {};
        let result = new ResourceItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tiers"] = this.tiers;
        data["resType"] = this.resType;
        super.toJSON(data);
        return data; 
    }
}

export interface IResourceItem extends IBaseItem {
    tiers: number;
    resType: ResourceItemType;
}

export enum ResourceItemType {
    Wood = "wood",
    Rock = "rock",
    Ore = "ore",
}

export class OwnedItemOfTrophyItem implements IOwnedItemOfTrophyItem {
    id!: number;
    item?: TrophyItem | undefined;
    amount!: number;

    constructor(data?: IOwnedItemOfTrophyItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.item = _data["item"] ? TrophyItem.fromJS(_data["item"]) : <any>undefined;
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): OwnedItemOfTrophyItem {
        data = typeof data === 'object' ? data : {};
        let result = new OwnedItemOfTrophyItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["item"] = this.item ? this.item.toJSON() : <any>undefined;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface IOwnedItemOfTrophyItem {
    id: number;
    item?: TrophyItem | undefined;
    amount: number;
}

export class TrophyItem extends BaseItem implements ITrophyItem {
    tiers!: number;
    trophyType!: TrophyType;

    constructor(data?: ITrophyItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.tiers = _data["tiers"];
            this.trophyType = _data["trophyType"];
        }
    }

    static fromJS(data: any): TrophyItem {
        data = typeof data === 'object' ? data : {};
        let result = new TrophyItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tiers"] = this.tiers;
        data["trophyType"] = this.trophyType;
        super.toJSON(data);
        return data; 
    }
}

export interface ITrophyItem extends IBaseItem {
    tiers: number;
    trophyType: TrophyType;
}

export enum TrophyType {
    Blood = "blood",
    Leather = "leather",
    Bone = "bone",
}

export class OwnedItemOfBaseItem implements IOwnedItemOfBaseItem {
    id!: number;
    item?: BaseItem | undefined;
    amount!: number;

    constructor(data?: IOwnedItemOfBaseItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.item = _data["item"] ? BaseItem.fromJS(_data["item"]) : <any>undefined;
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): OwnedItemOfBaseItem {
        data = typeof data === 'object' ? data : {};
        let result = new OwnedItemOfBaseItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["item"] = this.item ? this.item.toJSON() : <any>undefined;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface IOwnedItemOfBaseItem {
    id: number;
    item?: BaseItem | undefined;
    amount: number;
}

export class Map implements IMap {
    name?: string | undefined;
    cells?: Cell[] | undefined;

    constructor(data?: IMap) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["cells"])) {
                this.cells = [] as any;
                for (let item of _data["cells"])
                    this.cells!.push(Cell.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Map {
        data = typeof data === 'object' ? data : {};
        let result = new Map();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.cells)) {
            data["cells"] = [];
            for (let item of this.cells)
                data["cells"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMap {
    name?: string | undefined;
    cells?: Cell[] | undefined;
}

export class Cell implements ICell {
    id!: number;
    x!: number;
    y!: number;
    dangerosity!: number;
    abundance!: number;
    type!: CellType;

    constructor(data?: ICell) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.x = _data["x"];
            this.y = _data["y"];
            this.dangerosity = _data["dangerosity"];
            this.abundance = _data["abundance"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): Cell {
        data = typeof data === 'object' ? data : {};
        let result = new Cell();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["x"] = this.x;
        data["y"] = this.y;
        data["dangerosity"] = this.dangerosity;
        data["abundance"] = this.abundance;
        data["type"] = this.type;
        return data; 
    }
}

export interface ICell {
    id: number;
    x: number;
    y: number;
    dangerosity: number;
    abundance: number;
    type: CellType;
}

export enum CellType {
    City = "city",
    Plain = "plain",
    Forest = "forest",
    Mountain = "mountain",
    Water = "water",
}

export enum Directions {
    North = 0,
    Est = 1,
    South = 2,
    West = 3,
}

export enum CombatStyle {
    Cunning = "cunning",
    Strategy = "strategy",
    Strength = "strength",
}

export class LoginRequestDto implements ILoginRequestDto {
    userName?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILoginRequestDto {
    userName?: string | undefined;
    password?: string | undefined;
}

export class RegisterRequestDto implements IRegisterRequestDto {
    email?: string | undefined;
    name?: string | undefined;
    password?: string | undefined;
    registeringPassword?: string | undefined;

    constructor(data?: IRegisterRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.name = _data["name"];
            this.password = _data["password"];
            this.registeringPassword = _data["registeringPassword"];
        }
    }

    static fromJS(data: any): RegisterRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["name"] = this.name;
        data["password"] = this.password;
        data["registeringPassword"] = this.registeringPassword;
        return data; 
    }
}

export interface IRegisterRequestDto {
    email?: string | undefined;
    name?: string | undefined;
    password?: string | undefined;
    registeringPassword?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}